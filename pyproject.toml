[tool.poetry]
name = "learnsciml"
version = "0.3.0"
description = "Clean, modular toolkit for Scientific Machine Learning education"
authors = ["SciML Education Team"]
readme = "README.md"
packages = [{include = "learnsciml"}]
keywords = ["scientific-computing", "machine-learning", "education", "neural-networks", "pde"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[tool.poetry.dependencies]
python = "^3.8"
numpy = "^1.19.0"
matplotlib = "^3.3.0"
scipy = "^1.5.0"

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"
ipython = "^8.0.0"
pytest = "^7.0"
pytest-cov = "^4.0"
ruff = "^0.5.0"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
torch = "^1.9.0"

[tool.poetry.extras]
torch = ["torch"]
full = ["torch", "pandas", "seaborn"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration - Fast, stable alternative to Black + isort + flake8
[tool.ruff]
line-length = 88  # Google style uses 80, but 88 is more practical for Python
target-version = "py38"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# Google Python Style Guide rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PL",     # pylint
    "NPY",    # NumPy-specific rules
]
ignore = [
    "ANN",     # Type annotations (optional for educational code)
    "N806",    # Uppercase variables (X, Y, Z are mathematical convention)
    "N803",    # Uppercase arguments (same reason)
    "NPY002",  # NumPy legacy random (still valid, widely used)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["ANN201", "PLR2004", "PLR0913"]
"examples/*.py" = ["ANN", "PLR2004"]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google docstring convention

[tool.ruff.lint.isort]
# Google style import ordering
force-single-line = false
force-sort-within-sections = true
known-first-party = ["learnsciml"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"  # Google style uses double quotes
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true  # Format code in docstrings

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=learnsciml",
    "--cov-report=term-missing",
    "--cov-report=html",
]

# Coverage configuration
[tool.coverage.run]
source = ["learnsciml"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]